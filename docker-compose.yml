version: '3.9'

services:
  cron:
    image: debian:bookworm-slim
    container_name: ${APP_NAME}-cron
    restart: unless-stopped
    command:
      - /bin/bash
      - '-c'
      - |
        USER=epg
        CRON_DIR=/cron
        RETRY=1

        set_timezone() {
          ln -sf /usr/share/zoneinfo/$${APP_TIMEZONE} /etc/localtime
          dpkg-reconfigure -f noninteractive tzdata
        }

        apt_mirror() {
          [ -n "${APT_MIRROR}" ] && {
            [ -f /etc/apt/sources.list.d/debian.sources ] && sed -i -e "s/deb.debian.org/${APT_MIRROR}/g" /etc/apt/sources.list.d/debian.sources
          }
        }

        apt_updates() {
          for i in {1..$$RETRY}; do
            apt-get update>/dev/null
          done
        }

        apt_install() {
          for i in {1..$$RETRY}; do
            apt-get install -y $$@>/dev/null
          done
        }

        setup_nodejs() {
          NODE_MAJOR=${NODE_VERSION}
          [ -z "$${NODE_MAJOR}" ] && NODE_MAJOR=18
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
          echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
          apt_updates
          apt_install nodejs
          npm install -g npm>/dev/null
        }

        clean_lock() {
          for LOCK in .lock .once; do
            [ -f "/build/$$LOCK" ] && {
              echo "Cleaning /build/$$LOCK..."
              rm -f /build/$$LOCK
            }
          done
        }

        view_log() {
          sleep 40
          tail -F /home/$$USER/epg.log
        }

        adduser --disabled-password --gecos $$USER --quiet $$USER

        # initialization
        set_timezone
        apt_mirror
        apt_updates
        apt_install dos2unix curl cron git ca-certificates gnupg
        setup_nodejs
        clean_lock

        # https://levelup.gitconnected.com/cron-docker-the-easiest-job-scheduler-youll-ever-create-e1753eb5ea44
        if [ -z "$$SCHEDULER_ENV" ]; then
          echo "SCHEDULER_ENV is not set, using prod"
          SCHEDULER_ENV="prod"
        fi

        # change owner of build directory to epg user
        chown $$USER /build

        # Fixup line ending and permissions
        dos2unix $$CRON_DIR/*
        find $$CRON_DIR -type f -name '*.sh' -exec chmod +x {} \; -exec chown $$USER {} \;

        # Select the crontab file based on the environment
        CRON_FILE="$$CRON_DIR/crontab.$$SCHEDULER_ENV"
        echo "Loading crontab file: $$CRON_FILE"

        # Load the crontab file
        crontab -u $$USER $$CRON_FILE

        # show logs
        view_log &

        # Start cron
        echo "Starting cron..."
        cron -f -L 15
    environment:
      APP_TIMEZONE: ${APP_TIMEZONE}
    volumes:
      - ./cron:/cron
      - ./build:/build
  nginx:
    image: nginx
    container_name: ${APP_NAME}-web
    restart: unless-stopped
    command:
      - /bin/bash
      - '-c'
      - |
        set_timezone() {
          ln -sf /usr/share/zoneinfo/${APP_TIMEZONE} /etc/localtime
          dpkg-reconfigure -f noninteractive tzdata
        }
        set_timezone
        ./docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - ${APP_HTTP_PORT}:80
    environment:
      APP_TIMEZONE: ${APP_TIMEZONE}
    volumes:
      - ./build:/build
      - ./templates:/etc/nginx/templates
